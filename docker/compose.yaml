# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.5.3
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-airflow-trino}
  build:
    context: .
    dockerfile: ./airflow.Dockerfile
  environment:
    &airflow-common-env
    TZ: 'America/Chicago'
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW_CONN_TRINO: trino://trino:8080
    # For backward compatibility, with Airflow <2.3
    #AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW_CONFIG: '/opt/airflow/config/config.cfg'
    #OPENLINEAGE_URL: 'http://192.168.1.39:5000'
    #OPENLINEAGE_NAMESPACE: 'airflow'
    #PGUID: 'etl'
    #PGPASS: 'demopass'

    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ../src/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ../src/spark_jobs:/opt/airflow/spark_jobs
    - ../src/trino_jobs:/opt/airflow/trino_jobs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dbt:/opt/airflow/dbt
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/sql:/opt/sql
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/datalake:/opt/dbt
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/profile:/opt/dbt/profiles
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/profile:/opt/airflow/.dbt/
    #- ${AIRFLOW_PROJ_DIR:-.}/jobs:/opt/airflow/jobs
    - ./jobs:/opt/airflow/jobs # Common jobs folder for multiple services
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
  - etl-stack

x-spark-common:
  &spark-common
  #image: bitnami/spark:3.5
  build:
      context: .
      dockerfile: spark.Dockerfile
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
  networks:
    - etl-stack

services:
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_MULTIPLE_DATABASES: superset
      POSTGRES_MULTIPLE_USERS: superset:superset  # user:password
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-scripts/init-superset-db.sh:/docker-entrypoint-initdb.d/init-superset-db.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - etl-stack

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - etl-stack

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 9093:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9093/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  airflow-worker:
    <<: *airflow-common
    # start
    tmpfs:
      - '/opt/airflow/'
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.9.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - etl-stack

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      - etl-stack

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5553:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5553/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  trino:
    container_name: trino
    image: trinodb/trino:476
    hostname: trino
    ports:
      - '8089:8080'
    volumes:
      - ./lake/etc:/usr/lib/trino/etc:ro
      - ./lake/etc/catalog:/etc/trino/catalog
      # - ./plugins:/usr/lib/trino/plugin
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 14G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      minio:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  mariadb:
    container_name: mariadb
    hostname: mariadb
    image: mariadb:10.5.8
    ports:
      - 3306:3306
    volumes:
      - ./mariadb-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - etl-stack

  hive-metastore:
    container_name: hive-metastore
    # build:
    #   context: .
    #   dockerfile: Dockerfile.hive
    hostname: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    # image: 'apache/hive-metastore:3.1.3'
    ports:
      - '9083:9083' # Metastore Thrift
    volumes:
      #- ./lake/conf:/opt/apache-hive-metastore-3.0.0-bin/conf
      - ./lake/conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    #   - ./lake/conf/tez-site.xml:/opt/tez/conf/tez-site.xml:ro
    environment:
      # DB_TYPE: mysql
      METASTORE_DB_HOSTNAME: mariadb
      # HIVE_EXECUTION_ENGINE: mr
    depends_on:
      mariadb:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  minio:
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z
    volumes:
      - ./lake/data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - 9021:9001
      - 9020:9000
    #command: ["server", "/data", "--console-address", ":9001"]
    command: |
      /bin/sh -c "
        mc alias set minio http://localhost:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
        mc mb minio/warehouse;
        mc anonymous set public minio/warehouse;
        exec /usr/bin/minio server /data --console-address :9001
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  # Spark
  spark-master:
    <<: *spark-common
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_MASTER_PORT=7077
      - SPARK_PUBLIC_DNS=spark-master
    ports:
      - "4040:4040"
      - "7077:7077"
      - "7078:7078" # Fallback port
      - "8081:8080" # Spark UI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl-stack

  spark-worker:
    <<: *spark-common
    container_name: spark-worker
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8080
      - SPARK_PUBLIC_DNS=spark-worker
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - etl-stack

  superset:
    container_name: superset
    #image: apache/superset:4.1.2
    build:
      context: .
      dockerfile: superset.Dockerfile
    restart: always
    ports:
      - "8088:8088"
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://superset:superset@postgres/superset
      - SUPERSET_SECRET_KEY=superset
      - SUPERSET_FAB_ADMIN_USERNAME=admin
      - SUPERSET_FAB_ADMIN_PASSWORD=admin
      - SUPERSET_FAB_ADMIN_EMAIL=admin@superset.com
      - _PIP_ADDITIONAL_REQUIREMENTS=sqlalchemy-trino psycopg2-binary pymysql
    volumes:
      - ./viz/superset_data:/app/superset_home
      - ./viz/superset:/app/pythonpath
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      trino:
        condition: service_healthy
    networks:
      - etl-stack

  superset-init:
    container_name: superset-init
    #image: apache/superset:latest
    build:
      context: .
      dockerfile: superset.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      trino:
        condition: service_healthy
    volumes:
      - ./init-scripts/superset-init.sh:/app/superset-init.sh
      - ./viz/superset_data:/app/superset_home
    command: ["bash", "/app/superset-init.sh"]
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://superset:superset@postgres/superset
      - SUPERSET_SECRET_KEY=josemi-123
    networks:
      - etl-stack

volumes:
  postgres-db-volume:
  #superset_data:

  #minio-data:
    #driver: local

networks:
  etl-stack:
    driver: bridge
    name: etl-stack
